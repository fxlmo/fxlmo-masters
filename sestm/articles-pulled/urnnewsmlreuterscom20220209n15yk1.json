{"date": "2022-02-09 00:02:57+00:00", "ticker": "AMZN", "mrkt_info": {"open": 3158.71, "close": 3223.79}, "html": "<div class=\"storyContent\" lang=\"en\"><style type=\"text/css\">.storyContent * {border-color:inherit !important;outline-color:inherit !important;}</style><div>\n                <p>\n        Just like many other production DevOps engineering teams, our JFrog team deploys new version releases several times a day to AWS, Azure and GCP, across more than 20 cloud regions. This process used to take us many hours and could have even failed if it was done alongside maintenance by other teams.\n      </p>\n                <p>\n        As part of our ongoing cloud improvements in 2021, we decided to change our single-instance setup we use to handle cloud deployment in our own SaaS environment, which means SaaS deployment of software releases of any kind to end users. We wanted to distribute our software from one main site across a large scale of regions, which would require heavy automation and use a full proof, tested, scalable infrastructure.\n      </p>\n                <p>\n                  <strong>We decided to \"eat our own dog food\" and upscale our single-instance JFrog Artifactory to multi-instance <a href=\"https://jfrog.com/solution-sheet/jfrog-platform/\" data-type=\"url\" class=\"tr-link\" translate=\"no\">JFrog Platform</a> and also set up Distribution Edges.</strong>\n                </p>\n                <h4>\n        Our Use Case\n      </h4>\n                <p>\n        In the past, we enjoyed the many benefits of working with one JFrog Artifactory instance as our private Docker and Helm registry in the production environment. It allowed us to store, share and deploy our binary artifacts from one single source of truth to any JFrog cloud region.\n      </p>\n                <p>\n                  <span>Single-point-of-failure for multiple production regions</span>\n                </p>\n                <p>\n        The biggest advantage of this single-instance approach is in its simplicity. But, it's not scalable. The single-instance setup may be the most efficient option for low demand environments, and is relatively simple to configure, but when it serves both static and dynamic content with the same configuration, the demand grows and it becomes inefficient. Also, using one instance poses a potential risk because it could lead to a situation in which just one malfunction or fault causes the whole system to stop working.\n      </p>\n                <p>\n        Moreover, In the past, software used to be delivered in versions, which were released weeks/months apart. Whenever a new version was released, the operation teams had to manually update the software. All that has now changed.\n      </p>\n                <h4>\n        The Solution\n      </h4>\n                <p>\n        The JFrog Platform enables the seamless and secure flow of our software releases from the developer code and all the way to production.\n      </p>\n                <p>\n        Our configuration is <strong>multi-cloud</strong> and deployed with <strong>HA redundant network architecture</strong>. This means that there is no single-point-of-failure, and our internal system can continue to operate as long as at least one of the Artifactory Edge nodes are operational. This maximizes our uptime to up to \"five nines\" availability.\n      </p>\n                <p>\n        JFrog Cloud currently processes millions of downloads from our cloud Artifactory Edges to our production runtime clusters. Nothing is delivered from the internet or other JFrog servers.\n      </p>\n                <p>\n                  <span>Multi-instance approach for multiple production regions</span>\n                </p>\n                <h4>\n        Our daily workflow: Dev2Cloud production flow\n      </h4>\n                <p>\n        We implemented strict forward controls about how we are delivering new versions to cloud production internally. Here are two examples:\n      </p>\n                <ol>\n                  <li>\n          Only the <strong>RnD delivery group</strong> deploys and promotes versions via the related product CI job to edges and cloud staging.\n        </li>\n                  <li>\n          Only the <strong>Production delivery group</strong> promotes or demotes versions via a CI job to cloud production. Promoting a version which is not deployed into the edges, will fail by design.\n        </li>\n                </ol>\n                <h4>\n        1. Software distribution - RnD delivery group\n      </h4>\n                <p>\n        Today, all of our delivery teams know how to promote their releases into Artifactory Edges using trusted, immutable Release Bundles. This includes our own in-house official JFrog Platform releases and chart dependencies, as well as external third party dependencies.\n      </p>\n                <div>\n                  <strong>\n                    <span>Did you know?<br/></span>\n                  </strong> Packages hosted in a JFrog Artifactory Edge node are part of a Release Bundle which is a secure and immutable collection of software packages.<br/><span><a href=\"https://www.jfrog.com/confluence/display/JFROG/JFrog+Artifactory+Edge\" data-type=\"url\" class=\"tr-link\" translate=\"no\">Learn More &gt;</a></span></div>\n                <h4>\n        2. Software delivery - Production delivery group\n      </h4>\n                <p>\n                  <a href=\"https://jfrog.com/solution-sheet/distribution-edges/\" data-type=\"url\" class=\"tr-link\" translate=\"no\">JFrog Distribution</a> enables us to speed up deployments and concurrent downloads at scale and support high-concurrency downloads and verified consumption.\n      </p>\n                <p>\n        We developed an in-house deployer service (see the JFrog internal clients in the diagram in the solution section above) which is responsible for E2E Cloud provisioning, deployments and maintenance. It fetches release bundles from the DevCenter that contain Helm charts and <a href=\"https://jfrog.com/knowledge-base/a-beginners-guide-to-understanding-and-building-docker-images/\" data-type=\"url\" class=\"tr-link\" translate=\"no\">Docker images</a> (which are essentially what deploys our workloads).\n      </p>\n                <div>\n        Read more and get started with Artifactory as your <a href=\"https://www.jfrog.com/confluence/display/JFROG/Getting+Started+with+Artifactory+as+a+Docker+Registry\" data-type=\"url\" class=\"tr-link\" translate=\"no\">Docker registry</a> and for your <a href=\"https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories\" data-type=\"url\" class=\"tr-link\" translate=\"no\">Helm Chart repositories</a>.\n      </div>\n                <h4>\n        Infinitely Scalable - Network Acceleration and Resiliency\n      </h4>\n                <p>\n        Releasing software updates rapidly across massive infrastructure footprints, users or download spikes, requires a DNS solution. Our team is heavily invested in ensuring a scalable HA solution, to improve network utilization and resiliency at scale. After exploring a few different options for our DNS solution, we decided to use an AWS R53 for our latency routing policy (our DNS solution).\n      </p>\n                <p>\n        For our use case, we have a collection of software release bundles (Docker images and Helm Charts) available for clients, in different regions, to download from one of the available Artifactory Cloud Edges through a single endpoint (Latency Routing Policy).\n      </p>\n                <p>\n        Latency based records is the best option since it allows routing traffic to the edge with the best latency and less round-trip time, by applying associated health checks. Using AWS R53 agnostically, allows us to gain the advantage of using an ALIAS record which decreases the time to final answer resolution, as the authoritative servers traverse the DNS hierarchy and retrieve the final answer much faster.<br/></p>\n                <h4>\n        Outcome\n      </h4>\n                <p>\n        After almost a year of running in production, we can see tremendous improvements with our cloud deployments. Utilizing the JFrog Platform, we were able to improve deployment speed, governance and network utilization when releasing updates across large-scale, agnostic infrastructure to any cloud server.\n      </p>\n                <div>\n                  <span>\n                    <strong>Get started quickly with the JFrog Platform</strong>\n                  </span>\n                  <br/>\n         Create a free <a href=\"https://academy.jfrog.com/\" data-type=\"url\" class=\"tr-link\" translate=\"no\">JFrog Academy</a> account and start learning today!\n      </div>\n                <h4>\n        Closing\n      </h4>\n                <p>\n        Our experience with the multi-instance approach has been very positive, so-if you're willing to do some extra initial configuration, we recommend going with multi-instance right from the start.\n      </p>\n                <p>\n        Special thanks to everyone that contributed to the design and implementation of the distributed cloud solution. Special thanks to Eran Nissan, Eldad Assis, Matan Katz, Asaf Federman, Ronny Niv. as well as some of the folks from AWS. Additional thanks to the rest of our CTO, Cloud Production and DevOps teams for their support and help with JFrog Distributed* Cloud features, processes, and design decisions!\n      </p>\n                <p>\n        Stay tuned for more interesting updates from our team as we continue to create additional advanced features for JFrog Cloud.\n      </p>\n              </div>\n              <div id=\"public_attachments\">\n                <p>\n                  <strong>Attachments</strong>\n                </p>\n                <ul class=\"bulleted-list arrowlist\">\n                  <li>\n                    <a href=\"https://jfrog.com/blog/our-solution-for-scalable-multi-region-saas-deployment/\" data-type=\"url\" class=\"tr-link\" translate=\"no\">Original document</a>\n                  </li>\n                </ul>\n              </div>\n              <div id=\"public_disclaimer\">\n                <p>\n                  <strong>Disclaimer</strong>\n                </p>\n                <p>\n                  <strong>JFrog Ltd.</strong> published this content on <strong>08 February 2022</strong> and is solely responsible for the information contained therein. Distributed by Public, unedited and unaltered, on <strong>09 February 2022 00:02:57 UTC</strong></p>\n              </div><p class=\"line-break\"><br/></p><p class=\"tr-copyright\">(C) Copyright 2022 - JFrog Ltd.</p><p class=\"line-break\"><br/></p><p class=\"tr-slugline\">Keywords: JFrog-Ltd.</p></div>"}